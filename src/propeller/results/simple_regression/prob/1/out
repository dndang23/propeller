Beginning run number 1

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:in1 0.16298758287361448] [:integer_mult 0.5870971154596467] [:integer_add 0.6175665706886958] [:exec_if 0.16942275878894417] [:exec_dup 0.4424651370193633] [:integer_add 0.4800727961733954] [0 0.7230772011657348] [:exec_if 0.025630581460825752] [:integer_subtract 0.021910428873970853] [:integer_add 0.5013528516454765] [:exec_dup 0.9404457366058269] [:integer_add 0.5674036650273931] [:integer_mult 0.3560736257352811] [:exec_if 0.1793432072971837] [1 0.7086905837710152] [:integer_subtract 0.6156405678029847] [:exec_dup 0.29106879671798047] [1 0.29528255259821007] [:integer_eq 0.15523753326395828] [close 0.9293839745105369] [:integer_add 0.7088310520065366] [:in1 0.8468117898984362] [:integer_eq 0.06450990422168357] [:integer_quot 0.7111880759215207] [1 0.878197329262325] [:integer_mult 0.67636552695749] [:exec_if 0.9572035888105559] [:in1 0.18181212866282181] [:in1 0.20465027664839974] [close 0.14958982832024148] [:in1 0.877028605202631] [:exec_if 0.8162870640216123] [:integer_quot 0.3638609277244606] [:in1 0.7689286656130468] [:integer_mult 0.6022752048338024] [:integer_mult -0.002246435678983697] [:exec_dup 0.27553796272055775] [:in1 0.9461268189310061] [:integer_quot 0.10561077399810291] [:exec_dup 0.8436125052499752] [:integer_quot 0.4383824756821145] [:exec_dup 0.771233643541885] [:integer_mult 0.9040522559380315] [:in1 0.9196458655035673] [close 0.16104714442542636] [:exec_if 0.1419267641781199] [close 0.9835264210703758] [0 0.9830328500280748] [:integer_add 0.5836817047461204] [close 0.5555944915660165] [:integer_add 0.49689045486704897] [close 0.15955464845663692] [:exec_if 0.9761316883070078] [:integer_add 0.22834218081626023] [:integer_add 0.693562662994763] [:exec_if 0.4763770116265287] [:integer_add 0.6931868351519417] [:integer_add 0.24885597524148362] [:exec_dup 0.4669232756898368] [1 0.8118470315695467] [:integer_add 0.8407222462600936] [0 0.02380609355828389] [:integer_eq 0.14188709578636047] [close 0.7805825432649416] [:exec_dup 0.7643759952378202]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 1}
{:num_tries 1}
{:total_num_generations 30}
{:list_of_successful_generations [30]}

Beginning run number 2

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([close 0.46731005794228464] [:in1 0.7770042591520918] [:integer_quot 0.7447794921048704] [:in1 0.24794034995692038] [:exec_if 0.9821787573927805] [:exec_dup 0.08422430583219331] [:exec_dup 0.6686760698334683] [:integer_eq 0.22368203019880417] [:integer_mult 0.3088145869405583] [:integer_mult 0.8947528341352179] [:in1 0.9383678248031325] [:integer_mult 0.999963672364633] [1 0.57062357319926] [close 0.5710234430285117] [1 0.4986954896550053] [:exec_if 0.2346825418205438] [:integer_add 0.8655289501669725] [:exec_if 0.7094675193531801] [1 0.03326161766521385] [:exec_if 0.5286704375173509] [1 0.6882319058405397] [:integer_add 0.4350963269572906] [:integer_add 0.8320771207007778] [:in1 0.1571756560707609] [:integer_add 0.7748811382689831] [:integer_subtract 0.7249450807718795] [:integer_mult 0.4961830557676833] [:exec_dup 0.3865881645675503] [:integer_add 0.6731531545773858]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 2}
{:num_tries 2}
{:total_num_generations 46}
{:list_of_successful_generations [30 16]}

Beginning run number 3

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([0 0.5746294572773496] [0 0.30152434277831375] [:integer_eq 0.012643350958616573] [:exec_if 0.18328381659742576] [:integer_mult 0.20707053486728633] [close 0.6999933046995123] [:exec_if 0.17916198602583644] [0 0.09273798610910322] [0 0.9662980763795016] [:integer_add 0.011417056165943795] [:integer_eq 0.2503236564106087] [1 0.3655068496546624] [1 0.08762236161075199] [:integer_quot 0.562541160880905] [0 0.929988861732985] [:in1 0.7629129884111853] [:integer_eq 0.5618365352117897] [1 0.7320727586955527] [:in1 0.5637652770140975] [:integer_add 0.42826548024499056] [:in1 0.4076901711171764] [:integer_mult 0.6317525820204752] [1 0.23585920635620208] [:integer_add 0.17718520991353015] [close 0.16883356809098393] [1 0.33067019458509705] [:exec_dup 0.676679801249725] [:integer_add 0.6861680703711003] [:integer_add 0.8496030354053389] [:integer_subtract 0.10148256814238832] [:integer_add 0.7252683198591048] [:integer_quot 0.2887518487622839] [:exec_if 0.9003938877884972] [:exec_if 0.48107567975858123] [:in1 0.9652159798855291] [:integer_mult 0.9670349114843181] [:integer_eq 0.9715905238621754] [:integer_add 0.7059207204747799] [close 0.4123595445967783] [:integer_eq 0.1962428631605322] [:in1 0.79837821983363] [:integer_eq 0.2486990236817318] [1 0.27526184994696284] [:exec_dup 0.40048175302236044] [1 0.8692832919286922] [:exec_dup 0.07056149968403969] [:integer_add 0.8416876624668461] [0 0.0992816473086356] [1 0.4266615341470884] [:integer_add 0.33544183287437623] [0 0.050953192392549584] [:exec_dup 0.4005817349508286] [:exec_dup 0.475672868981446] [:integer_mult 0.2473259119193132] [:integer_eq 0.1718228476308774] [:exec_dup 0.6127329915960721] [:exec_if 0.408460820093396]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 3}
{:num_tries 3}
{:total_num_generations 56}
{:list_of_successful_generations [30 16 10]}

Beginning run number 4

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:integer_subtract 0.7466543515130618] [close 0.5229159221169013] [:integer_add 0.2209212096252214] [:exec_if 0.1742476575564509] [:integer_mult 0.946291990044539] [:in1 0.7338723312614304] [:integer_eq 0.10737923238506375] [0 0.1622667805034005] [:integer_quot 0.5207965479835669] [:exec_if 0.9603071827955844] [:integer_add 0.6409733349546486] [close 0.004418960623535195] [:exec_if 0.36788522209818353] [0 0.5491756195027897] [:exec_dup 0.32897245961087684] [:integer_add 0.9129791562918786] [:integer_mult 0.34522643132102937] [1 0.5750235102868233] [:exec_dup 0.2861581449524102] [0 0.12229020704793919] [:exec_if 0.43024811311749706] [:in1 0.6444890383620634] [1 0.5941091644231533] [1 0.7886476188281792] [1 0.03513623455311499] [:integer_add 0.8647644588151284] [:integer_quot 0.6085050284036492] [:exec_if 0.09801655448276428] [0 0.2158301412298651] [1 0.5741653488491772] [0 0.8533321150069354] [:integer_mult 0.08702672538440326] [:in1 0.5886495038728341] [:exec_if 0.954270509652126] [:in1 0.9209317621078408] [:exec_dup 0.6393838442982342] [:integer_subtract 0.22055677776257276] [:exec_if 0.19651765750996397] [:in1 0.5362518830276587] [:integer_mult 0.9389623597339148] [:exec_if 0.5660835302945824] [:exec_if 0.36928517895061697] [close 0.11740429502034544] [:exec_dup 0.7025165763446581] [:exec_dup 0.8805690825890182] [:integer_add 0.87442836014435]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 4}
{:num_tries 4}
{:total_num_generations 184}
{:list_of_successful_generations [30 16 10 128]}

Beginning run number 5

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:integer_subtract 0.33368161030548626] [close 0.8137487932898905] [:integer_add 0.09439422281633059] [:exec_if 0.11659610330873939] [1 0.6225035824371432] [:exec_if 0.10733669195682294] [:integer_subtract 0.9818853633180915] [:integer_add 0.9833601606479438] [:exec_if 0.5138054236751902] [:integer_subtract 0.12157645865813005] [:integer_subtract 0.06272004945255638] [close 0.2985758154565978] [:in1 0.8320946805985607] [:exec_if 0.5194570761584042] [:integer_mult 0.765423708142131] [:in1 0.46027053654790345] [:integer_subtract 0.061432411710100276] [1 0.3841501233526571] [:in1 0.6574977941567922] [:in1 0.2028413868796358] [:integer_add 0.6009174955474749] [:integer_mult 0.34886450937244723] [:in1 0.4722415026265087] [close 0.8782918606771444] [0 0.8557695536247135] [:integer_mult 0.4076156091271679] [1 0.3228393080674031] [:exec_dup 0.6116268207749349] [:integer_add 0.23452335565740656] [:integer_mult 0.8704401358292578] [:exec_dup 0.9649214891609662] [1 0.7920550094223185] [:integer_subtract 0.5136091755737259] [:exec_if 0.3555728723302315] [1 0.5326516733670978] [close 0.9574759398366032] [:exec_dup 0.09074535458474285] [:exec_dup 0.3029564148625208] [:integer_mult 0.7170102006149944] [:integer_mult 0.7898833446834376] [:integer_quot 0.9411604552392653] [0 0.015113266247001378] [:integer_add 0.06428457455048352] [:integer_mult 0.03901087147812272] [:integer_add 0.15642123459906834] [1 -0.02884100262782079] [:exec_if 0.8971403930387067] [:integer_subtract 0.2554804549057353] [:integer_mult 0.5815586339844411] [0 0.969354553702168] [1 0.44516457509892104] [:integer_eq 0.5612341369330486] [:exec_dup 0.4527784057501464] [:integer_eq 0.052566367259356525] [:integer_quot 0.2866615452937099] [:exec_dup 0.6924798795317026] [:integer_subtract 0.6369130359821361] [:exec_if 0.5666767416087399] [:integer_quot 0.31218120960724494] [:integer_eq 0.5866766088497412] [1 0.8922975940585798] [:integer_add 0.9903330152187065] [:integer_add 0.5280452633620039] [:integer_mult 0.7807374340176251] [close 0.006896702646516095] [:exec_if 0.26774838543898705] [1 0.7215961874210857] [:integer_mult 0.8132697048046719] [:exec_dup 0.4459733830711045] [:integer_mult 0.7526571819633104] [:exec_if 0.9479719872857924]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 5}
{:num_tries 5}
{:total_num_generations 258}
{:list_of_successful_generations [30 16 10 128 74]}

Beginning run number 6

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:exec_dup 0.06779565656376796] [:integer_mult 0.6438855036979189] [:exec_if 0.9563216233287798] [:integer_quot 0.6667478658975426] [1 0.4011895940329263] [:integer_quot 0.7832183082822294] [:in1 0.9912670127420062] [:integer_eq 0.8305573600379721] [:integer_eq 0.6528556355666312] [:integer_add 0.21804822563487203] [:in1 0.7227075605146267] [:integer_mult 0.9732766690518904] [:integer_quot 0.8140973145658952] [:integer_quot 0.30261561231414913] [1 0.2899547788923156] [:exec_dup 0.5363405960315188] [:integer_eq 0.7086459847630124] [close 0.6332974845431594] [:exec_if 0.42237095553780657] [:in1 0.19486259941773199] [:integer_mult 0.9152690599068427] [:integer_eq 0.3516267578935667] [0 0.01665388380831101] [close 0.27807902825075265] [:integer_subtract 0.45767133082535993] [:exec_dup 0.18628258023917255] [close 0.928440143063072] [:integer_add 0.9724096106804301] [:integer_mult 0.7379887442077534] [close 0.6090050719517256] [:integer_eq 0.3111045300160422] [:in1 0.6250123178199304] [close 0.7697141760526375] [:integer_add 0.5343843716014155] [:integer_quot 0.29538089811166957] [:exec_if 0.09374287666787107] [:integer_quot 0.18030293734700464] [1 0.3985765987225276] [:exec_if 0.6385259389355142] [:exec_dup 0.09572680852012294] [0 0.47497755826597243] [1 0.030257792990529997] [:integer_subtract 0.6483080744615708] [:integer_subtract 0.15964951517384274] [:exec_dup 0.38040021108742306] [:integer_eq 0.5501189862603258] [:exec_dup 0.6328455988702908] [:exec_if 0.798954936271004] [:integer_eq 0.6446300739999156] [1 0.5012579839669419] [:integer_quot 0.13608441097797297] [:integer_add 0.7230248151409362] [:integer_mult 0.8322630947712876] [:exec_dup 0.7503301708329331]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 6}
{:num_tries 6}
{:total_num_generations 273}
{:list_of_successful_generations [30 16 10 128 74 15]}

Beginning run number 7

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([close 0.8136993912563355] [:integer_add 0.6936725858073175] [0 0.5023314168852547] [:integer_add 0.4097736706296481] [:integer_quot 0.24480934916736585] [close 0.5926294689599795] [close 0.6775288744740844] [0 0.05164591780786342] [:integer_subtract 0.6768280403279321] [:integer_eq 0.15204933239544371] [:integer_add 0.2725868329070207] [0 0.8481516445932933] [close 0.2125739676699967] [:exec_dup 0.49143710788929174] [1 0.22216633664986163] [:integer_mult 0.1350500702809604] [:exec_if 0.382678394147715] [:integer_quot 0.6004305866858285] [:integer_add 0.8456663028524483] [:integer_quot 0.23062422496865354] [:integer_quot 0.5484289311140692] [0 0.4573569796310364] [:integer_eq 0.5489686292403634] [:integer_add 0.8407975931730405] [:integer_add 0.24787358525350311] [:integer_quot 0.09539670743549909] [1 0.9230059671694723] [:exec_if 0.39360949201254214] [:integer_eq 0.20401240356489903] [:integer_quot 0.7990402888919307] [0 5.737541345454782E-4] [:in1 0.7833154256639329] [:integer_mult 0.7255905207002951] [:integer_quot 0.3312832875643097] [:exec_dup 0.6795054937148992] [:in1 0.019572400603414475] [:integer_subtract 0.9823529908604153] [:in1 0.9079160556441092] [:in1 0.178416088287512] [:integer_mult 0.47451759990236225] [close 0.761907499300818] [:integer_quot 0.39507420115362957] [0 0.07021116564902152] [:exec_if 0.5470440871339778] [:exec_if 0.881254593082775] [:in1 0.9880273684759636] [1 0.62571231351308] [0 0.08725455447161135] [0 0.06949597032995011] [:exec_dup 0.8679627259417906] [:exec_if 0.0951876055153581] [:integer_quot 0.029228206547339892] [:exec_if 0.48589829350306024] [:integer_add 0.2232109649820404] [close 0.7186740933927729] [:integer_add 0.36015610459404146] [:integer_add 0.4576563566620244] [0 0.07783584923285491] [:integer_mult 0.31876387884808643] [:exec_dup 0.3651162191088133] [1 0.810441046780128] [:integer_add 0.9329829068677913] [:exec_if 0.2237910403806873] [close 0.45913169649608065] [:integer_add 0.5373954155947318] [:in1 0.5897630007257144] [0 0.5463986424838622] [:integer_mult 0.8040778964285906] [1 0.5616020480334185] [:integer_add 0.1069868314034581] [:integer_add 0.26970662600444384] [:integer_subtract 0.7505150091033358] [:integer_subtract 0.3071336701286489] [:exec_dup 0.5298716502328003]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 7}
{:num_tries 7}
{:total_num_generations 282}
{:list_of_successful_generations [30 16 10 128 74 15 9]}

Beginning run number 8

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:integer_add 0.6933890469242282] [1 0.3813960449312518] [close 0.07249424668145266] [:integer_add 0.5143989938693526] [:in1 0.6116511649299595] [:exec_if 0.5783904147379211] [:exec_dup 0.4766936140234346] [1 0.9497041758408391] [close 0.08056765578700442] [:integer_add 0.11081063883388265] [:integer_add 0.7079251240087445] [1 0.07603221525308013] [:integer_add 0.6296368384836535] [:integer_add 0.6978807376270509] [:integer_quot 0.17245360898544626] [close 0.8253636918949225] [:integer_eq 0.20947700436949956] [:integer_mult 0.440900632108622] [:integer_eq 0.7426856680891338] [:integer_eq 0.7405309531411318] [:integer_eq 0.7470236959968181] [:in1 0.22889925581154644] [:in1 0.8362995649939701] [:integer_mult 0.5547945320501942] [:in1 0.1577021908374168] [:integer_mult 0.7921127062757723] [:in1 0.6734536215532665] [:integer_mult 0.5959669806344597] [:integer_add 0.6492230294443523] [:exec_if 0.3496117991551819]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 8}
{:num_tries 8}
{:total_num_generations 311}
{:list_of_successful_generations [30 16 10 128 74 15 9 29]}

Beginning run number 9

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:exec_dup 0.0899640159453633] [close 0.4843463139296022] [:integer_mult 0.5481157319078365] [:integer_mult 0.4660305057512958] [0 0.6880452669159155] [0 0.31991943994083827] [:integer_add 0.8901988468596749] [:integer_add 0.4878468766643661] [:exec_if 0.19037790472791516] [close 0.6001840795741343] [:integer_eq 0.6615025701692411] [:in1 0.6310195400933581] [:integer_eq 0.17700388401466638] [:integer_add 0.18648739616113075] [:exec_if 0.5747434733786856] [:integer_mult 0.2009418774561592] [1 0.16388600428957312] [:exec_dup 0.4288605042367779] [:integer_eq 0.3421741729189911] [1 0.11053830034445689] [1 0.24098256642839744] [:integer_mult 0.7337937297492104] [:in1 0.5696258405810339] [:integer_eq 0.34171887023267034] [:integer_mult 0.9635756178439204] [:integer_mult 0.580242202182382] [:integer_mult 0.23398648113947704] [:integer_subtract 0.5183450803101483] [:in1 0.3793211823102821] [:integer_mult 0.9990307129033074] [0 0.15854458016990036] [:in1 0.4092705057239453] [:integer_subtract 0.993146036859736] [:integer_subtract 0.6034630954827456] [close 0.9882433407870735] [:integer_quot 0.12036619733387344] [:integer_subtract 0.7475728886271048] [:integer_quot 0.8063791758176686] [:integer_eq 0.8915573101014522] [:integer_eq 0.6913740497352416] [:in1 0.38700700381403613] [:integer_add 0.7951703490670191] [:exec_if 0.682076076276357] [:integer_add 0.09225068210662735] [:integer_mult 0.9780228807685536] [:integer_eq 0.5586205594066054] [:integer_quot 0.8856143383298429] [0 0.2649321696930782] [:integer_mult 0.7093714180555055] [1 0.8487739739298855] [:integer_mult 0.7183714204752292] [1 0.7798776789322471] [:integer_mult 0.9565831369553165] [0 0.574332153322044] [:integer_quot 0.5362516371140974] [:integer_mult 0.9381928809666582] [:integer_eq 0.15808721604422715] [:in1 0.899799270896028] [:integer_add 0.11055869713815669] [:integer_add 0.9067159468140578] [:exec_dup 0.6075922423131566] [:integer_add 0.6761438236090171] [:exec_if 0.4522790663339481] [1 0.49538079610434516] [:exec_if 0.14757229860716514] [:integer_quot 0.08177755899337769] [1 0.8540359736957018] [:integer_mult 0.7836861240066653] [:exec_if 0.2742828186628672] [:in1 0.7411739360452115] [:integer_subtract 0.1782375180060407] [:integer_mult 0.5626487148396476] [:integer_eq 0.06782617809037739] [:integer_quot 0.049875631760012785] [1 0.8284772801807682] [:integer_add 0.8986852452786872] [:integer_mult 0.9643202342081256] [:integer_quot 0.5268637893123979] [close 0.5120853098563356] [:integer_quot 0.5139954571578985] [close 0.4066414948729966] [1 0.42398443683250975] [:integer_mult 0.4119297764721712] [:integer_subtract 0.4122292865818946] [:exec_if 0.39012696532492774] [:integer_mult 0.050003379104178625] [:integer_subtract 0.542262070652079] [close 0.5315711580916334] [close 0.42686690404878236] [:integer_add 0.45155045323774096] [close 0.3245448063260321] [1 0.6912720776467002] [1 0.016951766812644875] [:integer_quot 0.5099073534514695] [:integer_mult 0.5238194244335754] [:integer_quot 0.4417363319097677] [:integer_add 0.728749952242494] [:integer_mult 0.6336384777474899]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 9}
{:num_tries 9}
{:total_num_generations 325}
{:list_of_successful_generations [30 16 10 128 74 15 9 29 14]}

Beginning run number 10

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:exec_if 0.5217651547895036] [:integer_eq 0.9240997323609844] [:exec_if 0.8359098670180078] [:integer_mult 0.6303901602496802] [:integer_quot 0.3817493932596183] [:integer_eq 0.9537037341976867] [:integer_subtract 0.4772688488319365] [1 0.7516721933034894] [:integer_mult 0.13001539333124368] [:integer_mult 0.8219596193719159] [:in1 0.9594655909401453] [1 0.3115014170899968] [:exec_if 0.6534085287162418] [:in1 0.27968219119385984] [:integer_mult 0.8733888137179665] [:integer_add 0.6647903492246069] [:in1 0.9723281487240869] [:exec_if 0.22275712736063427] [:integer_mult 0.9462852311040186] [close 0.8223948166861036] [:integer_quot 0.5481058215440326] [:integer_quot 0.07301564017222646] [:integer_quot 0.34488624976655424] [1 0.9460377692155917] [:exec_dup 0.8890507838968229] [:exec_dup 0.45537307179295017] [:integer_eq 0.03983882493642943] [:integer_subtract 0.524537393549927] [1 0.32735960587467317] [1 0.6392374982582807] [:exec_dup 0.43905913088128484] [:integer_add 0.8364136476938272] [:exec_dup 0.9587908832374444] [:integer_add 0.5365979309251636]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 10}
{:num_tries 10}
{:total_num_generations 405}
{:list_of_successful_generations [30 16 10 128 74 15 9 29 14 80]}

Beginning run number 11

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([:integer_quot 0.7147635643324662] [:integer_quot 0.4910498100116718] [:integer_eq 0.43634212759424806] [close 0.2939475722339953] [:integer_add 0.15543653652348785] [:in1 0.961846942542403] [:integer_mult 0.1543673117030337] [:integer_eq 0.1594358462012352] [:integer_subtract 0.9512586160077895] [0 -0.006210617750306287] [:integer_quot 0.19090071426803623] [close 0.3683389216289707] [:exec_dup 0.8538462862069512] [:integer_subtract 0.7462305885215417] [:integer_add 0.6330059846145263] [0 0.1108535550473847] [:integer_subtract 0.2015920797971058] [:integer_subtract 0.629693551646262] [:integer_subtract 0.12800442734063644] [:integer_quot 0.028157434734893516] [:integer_quot 0.018706158222102642] [:integer_add 0.4383627980289917] [:integer_eq 0.5543745587548573] [:exec_if 0.043798250624166535] [:integer_mult 0.5688766417082158] [0 0.47714265258399546] [:integer_add 0.3034626491951915] [:integer_subtract 0.014508125265229242] [:exec_if 0.4601402219518801] [:in1 0.6454127106714682] [:exec_dup 0.11642906497997174] [:integer_mult 0.7325908982091386] [close 0.12695933890686362] [1 0.7833518763882816] [:integer_add 0.14874506626102757] [close 0.5314157670601348] [:integer_mult 0.37654789098194447] [:integer_add 0.12176425898880994] [:integer_subtract 0.26883848572940516] [close 0.8646756061298624] [1 0.3451080984521588] [:exec_dup 0.437701141618579] [:integer_add 0.7905754517776412] [:exec_dup 0.4381307266326212] [:integer_subtract 0.6210082372507831] [1 0.0808993926767978] [:integer_add 0.48667190126601445]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 11}
{:num_tries 11}
{:total_num_generations 436}
{:list_of_successful_generations [30 16 10 128 74 15 9 29 14 80 31]}

Beginning run number 12

Executing gp

Arguments used in genetic program:
{:starting-args {:max-initial-plushy-size 100, :training-data ({:input1 [-10], :output1 [-1007]} {:input1 [-9], :output1 [-735]} {:input1 [-8], :output1 [-517]} {:input1 [-7], :output1 [-347]} {:input1 [-6], :output1 [-219]} {:input1 [-5], :output1 [-127]} {:input1 [-4], :output1 [-65]} {:input1 [-3], :output1 [-27]} {:input1 [-2], :output1 [-7]} {:input1 [-1], :output1 [1]} {:input1 [0], :output1 [3]} {:input1 [1], :output1 [5]} {:input1 [2], :output1 [13]} {:input1 [3], :output1 [33]} {:input1 [4], :output1 [71]} {:input1 [5], :output1 [133]} {:input1 [6], :output1 [225]} {:input1 [7], :output1 [353]} {:input1 [8], :output1 [523]} {:input1 [9], :output1 [741]} {:input1 [10], :output1 [1013]}), :instructions "(:in1 :integer_add :integer_subtract :integer_mult :integer_quot :integer_eq :exec_dup :exec_if close 0 1)", :elitism false, :variation {:umad-prob 0.5, :mutation-prob 0.5}, :max-generations 500, :parent-selection :lexicase, :umad-rate 0.1, :tournament-size 5, :testing-data ({:input1 [-20], :output1 [-8017]} {:input1 [-19], :output1 [-6875]} {:input1 [-18], :output1 [-5847]} {:input1 [-17], :output1 [-4927]} {:input1 [-16], :output1 [-4109]} {:input1 [-15], :output1 [-3387]} {:input1 [-14], :output1 [-2755]} {:input1 [-13], :output1 [-2207]} {:input1 [-12], :output1 [-1737]} {:input1 [-11], :output1 [-1339]} {:input1 [11], :output1 [1345]} {:input1 [12], :output1 [1743]} {:input1 [13], :output1 [2213]} {:input1 [14], :output1 [2761]} {:input1 [15], :output1 [3393]} {:input1 [16], :output1 [4115]} {:input1 [17], :output1 [4933]} {:input1 [18], :output1 [5853]} {:input1 [19], :output1 [6881]} {:input1 [20], :output1 [8023]}), :step-limit 200, :error-function "propeller.problems.simple_regression$error_function@7aac8884", :population-size 500}}

Completed run

The best individual according to the genetic program is:
{:plushy ([1 0.8361044629811475] [:integer_add 0.2610593743876241] [0 0.345602849582484] [:in1 0.8798481900622919] [:integer_mult 0.5258418089151593] [:exec_dup 0.1334339793376309] [1 0.5172246391094453] [:in1 0.406133255880179] [:integer_mult 0.7701082519117485] [:integer_quot 0.459929296789347] [:integer_add 0.33524937529169596] [:integer_quot 0.7119340660722036] [1 0.7961861264506076] [:integer_add 0.6708247420108167] [:integer_mult 0.6542470549911947] [close 0.3035707668098315] [:exec_if 0.1676236203531191] [:integer_quot 0.5490242210282213] [:in1 0.927205134389336] [:integer_eq 0.4650799241788733] [:in1 0.7186780079698813] [:in1 0.2953683134499835] [1 0.7618433031862013] [:integer_quot 0.9414697561786788] [:exec_dup 0.4794349202474635] [close 0.04972110823876974] [:exec_dup 0.9523353423576502] [:exec_if 0.5952471683527162] [:in1 0.9152614077399508] [close 0.3241043156615546] [close 0.8690066023913087] [:integer_mult 0.8062629121452286] [:integer_mult 0.49100121926439055] [:in1 0.1902340308184528] [:integer_eq 0.32914866819948707] [close 0.3303940664868148] [:integer_mult 0.6667195154937712] [0 0.17404672011646222] [close 0.3317115357140231] [:integer_add 0.8121085522856527] [:integer_subtract 0.06972369683725554] [0 0.6777934921738364] [0 0.4526336654523513] [0 0.183208035439758] [:exec_dup 0.5200264741473947] [:integer_quot 0.2123392365805593] [close 0.861245932235421] [:integer_add 1.0016387741577268] [:integer_mult 0.6971035245176682] [close 0.9750763446511697] [1 0.8767767892905547] [:integer_add 0.9138655841725565] [1 0.22436168161499173] [:integer_add 0.8035053448003306] [:integer_subtract 0.3569501852911571] [:integer_subtract 0.529792007321753] [close 0.7056644627660722] [1 0.2581661205653644] [close 0.263916918789339] [:in1 0.1558435985404233] [:integer_quot 0.5993081559297624] [:exec_dup 0.28457080383045763]), :behaviors (-1007 -735 -517 -347 -219 -127 -65 -27 -7 1 3 5 13 33 71 133 225 353 523 741 1013), :errors (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), :total-error 0}

Statistics based on current number of runs: 
{:num_successes 12}
{:num_tries 12}
{:total_num_generations 478}
{:list_of_successful_generations [30 16 10 128 74 15 9 29 14 80 31 42]}

Results of run
{:percent_of_successes 1.0}
{:average_num_generations 39.833332}
{:list_of_successful_generations [30 16 10 128 74 15 9 29 14 80 31 42]}

